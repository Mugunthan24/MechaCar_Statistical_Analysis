install.packages("tidyverse")
install.packages("jsonlite")
?aov()
# Import data
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Import data
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
setwd("C:/Users/mugun/Desktop/Data Analytics Bootcamp/Challenges and Practice/Projects/15. Statistics and R/MechaCar_Statistical_Analysis")
# Import data
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(MechaCar_mpg)
x <- 1
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
# Graphs
?ggplot()
head(mpg)
# Bar Plot
plt <- ggplot(mpg, aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot the bar
?geom_bar()
# Bar Plot with Group_by
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
# Adding Formatting Functions
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# Line Plots
mpg_summary <- subset(mpg, manufacturer == "toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy = mean(hwy), .groups='keep') # Crete summary table
plt <- ggplot(mpg_summary, aes(x=cyl, y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
mpg_summary <- subset(mpg, manufacturer == "toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
## Line PLots adjust x and y
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
# Scatter Plot
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
## Color
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
## Shape
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
> plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
# Box Plot
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# Heat Map
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
# Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
## Faceting
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap
## facet_wrap
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
# Qualitative Test for Normality
MTCars = mtcars
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
# Sample vs Population
?sample_n()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# One Sample t-test
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# Two Sample t-Test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# Use the Two-Sample t-Test to Compare Samples (Paired T-Test)
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
# Use the ANOVA Test
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
# Need to add summary to get P-Value
summary(aov(hp ~ cyl,data=mtcars_filt))
# Corelation and Regression in R
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
# Return to Linear Regression
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
## Perform Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary
setwd("C:/Users/mugun/Desktop/Data Analytics Bootcamp/Challenges and Practice/Projects/15. Statistics and R/MechaCar_Statistical_Analysis")
# Import data
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
# Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Import data
MechaCar_mpg <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
# Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
View(MechaCar_mpg)
# Import data
MechaCar_mpg <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
# Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Loading dplyr library
library(dplyr)
# Import data
MechaCar_mpg <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
# Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Deliverable 1
## Loading dplyr library
library(dplyr)
## Import data
MechaCar_mpg <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
## Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
## Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Deliverable 2
Suspension_Coil <- read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Deliverable 1
## Loading dplyr library
library(dplyr)
## Import data - MechaCar_mpg.csv
MechaCar_mpg <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
## Generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
## Generate summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Deliverable 2
## Import data - Suspension_Coil.csv
Suspension_Coil <- read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Deliverable 2
## Import data - Suspension_Coil.csv
Suspension_Coil <- read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(Suspension_Coil)
View(Suspension_Coil)
View(MechaCar_mpg)
View(Suspension_Coil)
View(MechaCar_mpg)
View(Suspension_Coil)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI))
View(total_summary)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = Variance(PSI),
SD = sd(PSI)
)
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
SD = sd(PSI)
)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI)
)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI)
)
View(total_summary)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = Variance(PSI),
SD = sd(PSI)
)
View(total_summary)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = Variance(PSI)
)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = variance(PSI)
)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI)
)
View(Suspension_Coil)
View(total_summary)
## Creating total summary dataframe
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)
)
View(total_summary)
View(total_summary)
View(total_summary)
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)
, .groups = 'keep')
View(total_summary)
View(total_summary)
## Creating lot summary
lot_summary <- Suspension_Coil %>% group_by(PSI) %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)
, .groups = 'keep')
View(lot_summary)
View(lot_summary)
View(Suspension_Coil)
## Creating lot summary
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)
, .groups = 'keep')
View(lot_summary)
View(total_summary)
View(lot_summary)
population_mean <- 1500
t.test(Suspension_Coil$PSI,mu=population_mean)
View(Suspension_Coil)
View(Suspension_Coil)
View(lot_summary)
View(Suspension_Coil)
View(Suspension_Coil)
View(Suspension_Coil)
population_mean <- 1500
Suspension_Coil_Lot1 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot1")
View(Suspension_Coil_Lot1)
### Lot 3
Suspension_Coil_Lot3 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot3")
t.test(Suspension_Coil_Lot3$PSI,mu=population_mean)
### Lot 2
Suspension_Coil_Lot2 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot2")
t.test(Suspension_Coil_Lot2$PSI,mu=population_mean)
### Lot 1
Suspension_Coil_Lot1 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot1")
t.test(Suspension_Coil_Lot1$PSI,mu=population_mean)
### Lot 1
Suspension_Coil_Lot1 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot1")
t.test(Suspension_Coil_Lot1$PSI,mu=population_mean)
### Lot 2
Suspension_Coil_Lot2 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot2")
t.test(Suspension_Coil_Lot2$PSI,mu=population_mean)
### Lot 1
Suspension_Coil_Lot1 <- subset(Suspension_Coil, Manufacturing_Lot == "Lot1")
t.test(Suspension_Coil_Lot1$PSI,mu=population_mean)
View(Suspension_Coil_Lot1)
View(Suspension_Coil_Lot1)
View(Suspension_Coil_Lot3)
